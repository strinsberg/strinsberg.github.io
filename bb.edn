{:paths ["bb" "src"]
 :tasks

 ;; TODO ;;

 ; New task to build by writing each page from the clj files
 ; Create a function to build a table of contents from the body hiccup. Since we already add id's to each heading we need to identify the levels we want and when we find a heading we add it to the contents with the title and a link to the page id. Each level will start a list until we see a heading below it and then we finish with that level.
 ; Add all content back to the portfolio and clean it up
 ; Add screenshots and some nice functions to deal with them, use an assets folder
 ; Add a new home page
 ; Add a 404 page
 ; Copy files from css to pages/css
 ; Copy files from js to pages/js. This needs to not copy cljs files, by either putting them in a subdirectory and adjusting the cljs import function or looking at the extension and only copying folders and .js. I think the former is better, then I can copy things like wasm and just ignore the folder with cljs functions that will be added to html for scittle. OR *** Just use the scittle functionality to be able to get the code from a file and have a js folder that we straight copy to the destination folder.
 ; See about serving a folder without the httplz nix-shell, we want to either have the ability to serve a folder with coljure or just go back to using a python 3 command. This is all just for me, so I do not need to worry about dependencies. I will always have python installed.


 {:requires
  ([clojure.string :as str] [babashka.process :as ps] [babashka.fs :as fs])
  :init (def tmp "/tmp/strinsberg.github.io")
  :enter (let [task (current-task)]
           (when (not (str/starts-with? (str (:name task)) "-"))
             (println (str/capitalize (:name task)) " - " (:doc task))))

  build {:doc "Convert markdown to html and replace html placeholders."
         :task (do (run 'clean)
                   (run '-build:html)
                   (run '-build:css)
                   (println "*** Pages Built Succesfully ***"))}

  ;; Note this does not clean the pages folder, but just copies/replaces
  ;; new or modified files. Removed src files will not be removed during build.
  -build:html {:doc "Compile html files and copy them to pages directory."
               :task compile-html/-main}

  -build:css {:doc "Copy css files to pages"
              :task (shell "cp" "-r" "src/css" "pages/")}


  ;; Note that once this is running build-all can be called again and a page
  ;; refresh will reflect the changes. Not exactly hot reload, but the server
  ;; will reflect changes without having to be restarted, but obviously
  ;; the compilation must be re-run for changes to be reflected in the pages dir.
  serve {:doc "Build and serve"
         :depends [build]
         :task (shell "httplz -p 8080 pages")}

  ;; This works, though I am honestly not sure if it is the best way to do it.
  ;; Note that because build and pages are not tracked by git they will be
  ;; carried over when checking out gh-pages and then deleted along with
  ;; the previous contents of gh-pages.
  deploy {:doc "Build all and deploy to github pages."
          :depends [build]
          :task (do (fs/delete-tree tmp)
                    (fs/copy-tree "pages" tmp)
                    (shell "git checkout" "gh-pages")
                    ;; does not delete hidden files or dirs
                    (run! fs/delete-tree (fs/glob (fs/cwd) "**"))
                    (fs/copy-tree tmp (fs/cwd))
                    (println "Copied new pages files")
                    (shell "git add" ".")
                    (shell "git commit" "-m" "'update pages'")
                    (shell "git push")
                    (shell "git checkout" "main")
                    (println "*** Pages Deployed Succesfully ***"))}

  clean {:doc "Remove build artifacts."
         :task (do (fs/delete-tree "build") (fs/delete-tree "pages"))}}}
